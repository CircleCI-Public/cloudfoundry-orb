commands:
  dark_deploy:
    parameters:
      appname:
        description: App Name
        type: string
      dark_subdomain:
        default: dark
        description: Cloud Foundry dark domain to prefix domain (i.e. <dark_subdomain>.<domain>,
          defaults to "dark")
        type: string
      domain:
        description: Cloud Foundry domain registered to handle routes for this space
          (a "dark" or "live" sub-domain will be used in conjunction with this, i.e.
          <dark_subdomain>.<domain>)
        type: string
      manifest:
        default: ""
        description: The Cloud Foundry manifest for this environment
        type: string
      package:
        description: path to the asset/package to push
        type: string
      vars:
        default: ""
        description: Vars file for variable substitution.
        type: string
    steps:
    - run:
        command: |
          cf push --no-start "<<parameters.appname>>-dark" -f "<<parameters.manifest>>"<<# parameters.vars>> --vars-file "<<parameters.vars>>"<</ parameters.vars>> -p "<<parameters.package>>"<<# parameters.dark_subdomain>> -n "<<parameters.dark_subdomain>>"<</ parameters.dark_subdomain>> -d "<<parameters.domain>>"
          cf set-env "<<parameters.appname>>-dark" CIRCLE_BUILD_NUM "${CIRCLE_BUILD_NUM}"
          cf set-env "<<parameters.appname>>-dark" CIRCLE_SHA1 "${CIRCLE_SHA1}"
          cf set-env "<<parameters.appname>>-dark" CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID}"
          cf set-env "<<parameters.appname>>-dark" CIRCLE_PROJECT_USERNAME "${CIRCLE_PROJECT_USERNAME}"
          cf set-env "<<parameters.appname>>-dark" CIRCLE_PROJECT_REPONAME "${CIRCLE_PROJECT_REPONAME}"

          # Push as "dark" instance (URL in manifest)
          cf start "<<parameters.appname>>-dark"
          # Ensure dark route is exclusive to dark app
          cf unmap-route "<<parameters.appname>>" "<<parameters.domain>>"<<# parameters.dark_subdomain>> -n "<<parameters.dark_subdomain>>"<</ parameters.dark_subdomain>> || echo "Already exclusive"
        name: Cloud Foundry Dark Deployment
  install:
    description: Installs and authenticates with the latest CLI version if not present.
    parameters:
      endpoint:
        default: https://api.run.pivotal.io
        description: The domain of the Cloud Foundry runtime API endpoint. Defaults
          to https://api.run.pivotal.io
        type: string
      org:
        description: Cloud Foundry org to target
        type: string
      space:
        description: Cloud Foundry space to target
        type: string
    steps:
    - run:
        command: |
          : "${CF_USERNAME?Cloud Foundry username and password must be set as Environment variables before running this command.}"
          : "${CF_PASSWORD?Cloud Foundry username and password must be set as Environment variables before running this command.}"
          curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
          sudo dpkg -i cf-cli_amd64.deb
          cf -v
          cf api "<<parameters.endpoint>>"
          cf auth "$CF_USERNAME" "$CF_PASSWORD"
          cf target -o "<<parameters.org>>" -s "<<parameters.space>>"
        name: Setup CF CLI
  live_deploy:
    parameters:
      appname:
        description: App Name
        type: string
      domain:
        description: Cloud Foundry domain (a "dark" sub-domain will be used on this.)
        type: string
      live_subdomain:
        default: www
        description: Cloud Foundry live subdomain to prefix domain (i.e. <live_subdomain>.<domain>,
          defaults to "wwww")
        type: string
    steps:
    - run:
        command: |
          # Send "real" url to new version
          cf map-route "<<parameters.appname>>-dark" "<<parameters.domain>>"<<# parameters.live_subdomain>> -n "<<parameters.live_subdomain>>"<</ parameters.live_subdomain>>
          # Stop sending traffic to previous version
          cf unmap-route "<<parameters.appname>>" "<<parameters.domain>>"<<# parameters.live_subdomain>> -n "<<parameters.live_subdomain>>"<</ parameters.live_subdomain>>
          # stop previous version
          cf stop "<<parameters.appname>>"
          # delete previous version
          cf delete "<<parameters.appname>>" -f
          # Switch name of "dark" version to claim correct name
          cf rename "<<parameters.appname>>-dark" "<<parameters.appname>>"
        name: Cloud Foundry - Re-route live Domain
  push:
    parameters:
      appname:
        description: App Name
        type: string
      manifest:
        default: ""
        description: The Cloud Foundry manifest for this environment
        type: string
      package:
        default: ""
        description: path to the asset/package to push
        type: string
      vars:
        default: ""
        description: Vars file for variable substitution.
        type: string
    steps:
    - run:
        command: |
          #push no start so we can set envars
          cf push --no-start "<<parameters.appname>>" -f "<<parameters.manifest>>" <<# parameters.vars>> --vars-file "<<parameters.vars>>" <</ parameters.vars>> <<# parameters.package>> -p "<<parameters.package>>" <</ parameters.package>>
          cf set-env "<<parameters.appname>>" CIRCLE_BUILD_NUM "${CIRCLE_BUILD_NUM}"
          cf set-env "<<parameters.appname>>" CIRCLE_SHA1 "${CIRCLE_SHA1}"
          cf set-env "<<parameters.appname>>" CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID}"
          cf set-env "<<parameters.appname>>" CIRCLE_PROJECT_USERNAME "${CIRCLE_PROJECT_USERNAME}"
          cf set-env "<<parameters.appname>>" CIRCLE_PROJECT_REPONAME "${CIRCLE_PROJECT_REPONAME}"
          #now start
          cf start "<<parameters.appname>>"
        name: Cloud Foundry Push
description: |
  Push and deploy applications to Cloud Foundry
  Source: https://github.com/CircleCI-Public/cloudfoundry-orb
display:
  source_url: https://github.com/circleci-public/cloudfoundry-orb
examples:
  blue_green_deploy:
    description: |
      A blue-green deployment
    usage:
      orbs:
        cloudfoundry: circleci/cloudfoundry@x.y
      version: 2.1
      workflows:
        build_deploy:
          jobs:
          - cloudfoundry/blue_green:
              appname: your-app
              build_steps:
              - run: echo 'your build steps'
              - run: echo 'you can have more, too'
              context: your-context
              domain: your-domain
              manifest: null
              org: your-org
              package: null
              space: your-space
              validate_steps:
              - run: echo 'your validation steps'
              - run: echo 'you can also have more of these'
  build_and_push:
    description: |
      Build and deploy your application in a single job.
    usage:
      orbs:
        cloudfoundry: circleci/cloudfoundry@x.y
      version: 2.1
      workflows:
        build-deploy:
          jobs:
          - cloudfoundry/push:
              appname: your-app
              build_steps:
              - run: echo 'your build steps'
              - run: echo 'you can have more, too'
              manifest: null
              org: your-org
              package: null
              space: your-space
  push_existing_assets:
    description: |
      Deploy with artifacts created in previous CircleCI jobs
    usage:
      jobs:
        build:
          machine: true
          steps:
          - checkout
      orbs:
        cloudfoundry: circleci/cloudfoundry@x.y
      version: 2.1
      workflows:
        build-deploy:
          jobs:
          - build
          - cloudfoundry/push:
              appname: your-app
              manifest: null
              org: your-org
              package: null
              requires:
              - build
              space: your-space
              workspace_path: null
jobs:
  blue_green:
    description: Execute a blue/green deploy  in a single job. Expects either build_steps
      or workspace_path for assets to deploy.
    docker:
    - image: circleci/node:10
    parameters:
      appname:
        description: App Name
        type: string
      build_steps:
        default: []
        description: Steps to generate application package or files. Alternately provide
          `workspace_path`
        type: steps
      dark_subdomain:
        default: dark
        description: Cloud Foundry dark domain to prefix domain (i.e. <dark_subdomain>.<domain>,
          defaults to "dark")
        type: string
      domain:
        description: Cloud Foundry domain registered to handle routes for this space
          (a "dark" or "live" sub-domain will be used in conjunction with this, i.e.
          <dark_subdomain>.<domain>)
        type: string
      endpoint:
        default: https://api.run.pivotal.io
        description: The domain of the Cloud Foundry runtime API endpoint. Defaults
          to https://api.run.pivotal.io
        type: string
      live_subdomain:
        default: www
        description: Cloud Foundry live subdomain to prefix domain (i.e. <live_subdomain>.<domain>,
          defaults to "www")
        type: string
      manifest:
        default: ""
        description: The Cloud Foundry manifest for this environment
        type: string
      org:
        description: Cloud Foundry Org to target
        type: string
      package:
        description: path to the asset/package to push
        type: string
      space:
        description: Cloud Foundry space to target
        type: string
      validate_steps:
        default: []
        description: Optional steps to run between the dark and live deployments.
        type: steps
      vars:
        default: ""
        description: Vars file for variable substitution.
        type: string
      workspace_path:
        default: ""
        description: The key of a workflow workspace which contains artifact. Alternately
          provide `build_steps`
        type: string
    steps:
    - checkout
    - when:
        condition: <<parameters.build_steps>>
        steps: << parameters.build_steps >>
    - when:
        condition: <<parameters.workspace_path>>
        steps:
        - attach_workspace:
            at: <<parameters.workspace_path>>
    - install:
        endpoint: <<parameters.endpoint>>
        org: <<parameters.org>>
        space: <<parameters.space>>
    - dark_deploy:
        appname: <<parameters.appname>>
        dark_subdomain: <<parameters.dark_subdomain>>
        domain: <<parameters.domain>>
        manifest: <<parameters.manifest>>
        package: <<parameters.package>>
        vars: <<parameters.vars>>
    - when:
        condition: <<parameters.validate_steps>>
        steps: << parameters.validate_steps >>
    - live_deploy:
        appname: <<parameters.appname>>
        domain: <<parameters.domain>>
        live_subdomain: <<parameters.live_subdomain>>
  dark_deploy:
    description: Execute a dark (blue) deploy  in a single job. Expects either build_steps
      or workspace_path for assets to deploy.
    docker:
    - image: circleci/node:10
    parameters:
      appname:
        description: App Name
        type: string
      build_steps:
        default: []
        description: Steps to generate artifacts. Alternately provide `workspace_path`
        type: steps
      dark_subdomain:
        default: dark
        description: Cloud Foundry dark domain to prefix domain (i.e. <dark_subdomain>.<domain>,
          defaults to "dark")
        type: string
      domain:
        description: Cloud Foundry domain registered to handle routes for this space
          (a "dark" or "live" sub-domain will be used in conjunction with this, i.e.
          <dark_subdomain>.<domain>)
        type: string
      endpoint:
        default: https://api.run.pivotal.io
        description: The domain of the Cloud Foundry runtime API endpoint. Defaults
          to https://api.run.pivotal.io
        type: string
      manifest:
        default: ""
        description: The Cloud Foundry manifest for this environment
        type: string
      org:
        description: Cloud Foundry Org to target
        type: string
      package:
        description: path to the asset/package to push
        type: string
      space:
        description: Cloud Foundry space to target
        type: string
      validate_steps:
        default: []
        description: Optional steps to run between the dark and live deployments.
        type: steps
      vars:
        default: ""
        description: Vars file for variable substitution.
        type: string
      workspace_path:
        default: ""
        description: The key of a workflow workspace which contains artifact. Alternately
          provide `build_steps`
        type: string
    steps:
    - checkout
    - when:
        condition: <<parameters.build_steps>>
        steps: << parameters.build_steps >>
    - when:
        condition: <<parameters.workspace_path>>
        steps:
        - attach_workspace:
            at: <<parameters.workspace_path>>
    - install:
        endpoint: <<parameters.endpoint>>
        org: <<parameters.org>>
        space: <<parameters.space>>
    - dark_deploy:
        appname: <<parameters.appname>>
        dark_subdomain: <<parameters.dark_subdomain>>
        domain: <<parameters.domain>>
        manifest: <<parameters.manifest>>
        package: <<parameters.package>>
        vars: <<parameters.vars>>
    - when:
        condition: <<parameters.validate_steps>>
        steps: << parameters.validate_steps >>
  live_deploy:
    description: Execute final URL remap and application name cleanup.
    docker:
    - image: circleci/node:10
    parameters:
      appname:
        description: App Name
        type: string
      domain:
        description: Cloud Foundry domain registered to handle routes for this space
          (a "dark" or "live" sub-domain will be used in conjunction with this, i.e.
          <live_subdomain>.<domain>)
        type: string
      endpoint:
        default: https://api.run.pivotal.io
        description: The domain of the Cloud FOundry runtime API endpoint. Defaults
          to https://api.run.pivotal.io
        type: string
      live_subdomain:
        default: www
        description: Cloud Foundry dark domain to prefix domain (i.e. <live_subdomain>.<domain>,
          defaults to "www")
        type: string
      org:
        description: Cloud Foundry Org to target
        type: string
      space:
        description: Cloud Foundry space to target
        type: string
      validate_steps:
        default: []
        description: Optional steps to run before remapping URLs.
        type: steps
    steps:
    - install:
        endpoint: <<parameters.endpoint>>
        org: <<parameters.org>>
        space: <<parameters.space>>
    - when:
        condition: <<parameters.validate_steps>>
        steps: << parameters.validate_steps >>
    - live_deploy:
        appname: <<parameters.appname>>
        domain: <<parameters.domain>>
        live_subdomain: <<parameters.live_subdomain>>
  push:
    description: Execute a simple push in a single job. Expects either build_steps
      or workspace_path for assets to deploy.
    docker:
    - image: circleci/node:10
    parameters:
      appname:
        description: App Name
        type: string
      build_steps:
        default: []
        description: Steps to generate application package or files. Alternately provide
          `workspace_path`
        type: steps
      endpoint:
        default: https://api.run.pivotal.io
        description: The domain of the Cloud Foundry runtime API endpoint. Defaults
          to https://api.run.pivotal.io
        type: string
      manifest:
        default: ""
        description: The Cloud Foundry manifest for this environment
        type: string
      org:
        description: Cloud Foundry 'Org' to target
        type: string
      package:
        default: ""
        description: path to the package/files to push if not the current directory
        type: string
      space:
        description: Cloud Foundry 'Space' to target
        type: string
      vars:
        default: ""
        description: Vars file for variable substitution.
        type: string
      workspace_path:
        default: ""
        description: The key of a workflow workspace which contains artifact. Alternately
          provide `build_steps`
        type: string
    steps:
    - checkout
    - when:
        condition: <<parameters.build_steps>>
        steps: << parameters.build_steps >>
    - when:
        condition: <<parameters.workspace_path>>
        steps:
        - attach_workspace:
            at: <<parameters.workspace_path>>
    - install:
        endpoint: <<parameters.endpoint>>
        org: <<parameters.org>>
        space: <<parameters.space>>
    - push:
        appname: <<parameters.appname>>
        manifest: <<parameters.manifest>>
        package: <<parameters.package>>
        vars: <<parameters.vars>>
version: 2.1

